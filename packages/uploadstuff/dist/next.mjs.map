{"version":3,"sources":["../package.json","../src/internal/handler.ts","../src/next/core/approuter.ts","../src/upload-builder.ts","../next.ts"],"sourcesContent":["{\n  \"name\": \"uploadstuff\",\n  \"version\": \"0.0.1\",\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \"./client\": {\n      \"import\": \"./dist/client.mjs\",\n      \"types\": \"./dist/client.d.ts\"\n    },\n    \"./server\": {\n      \"import\": \"./dist/server.mjs\",\n      \"types\": \"./dist/server.d.ts\",\n      \"default\": \"./dist/server.mjs\"\n    },\n    \"./next\": {\n      \"import\": \"./dist/next.mjs\",\n      \"types\": \"./dist/next.d.ts\"\n    }\n  },\n  \"files\": [\n    \"dist\"\n  ],\n  \"typesVersions\": {\n    \"*\": {\n      \"*\": [\n        \"dist/*\"\n      ]\n    }\n  },\n  \"scripts\": {\n    \"build\": \"tsup\",\n    \"build:dev\": \"tsup --watch\",\n    \"typecheck\": \"\",\n    \"lint\": \"eslint *.ts* --max-warnings 0\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"next\": \"^13.4.3\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20.2.1\",\n    \"eslint\": \"^7.32.0\",\n    \"tsup\": \"^6.7.0\"\n  }\n}\n","import type { AnyRuntime, FileRouter, FileSize } from \"../types\";\r\nimport type { NextApiRequest, NextApiResponse } from \"next\";\r\n\r\nconst UPLOADSTUFF_VERSION = require(\"../../package.json\").version;\r\n\r\nconst UNITS = [\"B\", \"KB\", \"MB\", \"GB\"] as const;\r\ntype SizeUnit = (typeof UNITS)[number];\r\n\r\nexport const fileSizeToBytes = (input: string) => {\r\n  const regex = new RegExp(`^(\\\\d+)(\\\\.\\\\d+)?\\\\s*(${UNITS.join(\"|\")})$`, \"i\");\r\n  const match = input.match(regex);\r\n\r\n  if (!match) {\r\n    return new Error(\"Invalid file size format\");\r\n  }\r\n\r\n  const sizeValue = parseFloat(match[1]);\r\n  const sizeUnit = match[3].toUpperCase() as SizeUnit;\r\n\r\n  if (!UNITS.includes(sizeUnit)) {\r\n    throw new Error(\"Invalid file size unit\");\r\n  }\r\n  const bytes = sizeValue * Math.pow(1024, UNITS.indexOf(sizeUnit));\r\n  return Math.floor(bytes);\r\n};\r\n\r\nconst generateUploadStuffURL = (path: `/${string}`) => {\r\n  const host = process.env.CUSTOM_UPLOADSTUFF_URL;\r\n  return `${host}${path}`;\r\n};\r\n\r\nif (process.env.NODE_ENV !== \"development\") {\r\n  console.log(\"[UT] UploadStuff dev server is now running!\");\r\n}\r\n\r\nconst isValidResponse = (response: Response) => {\r\n  if (!response.ok) return false;\r\n  if (response.status >= 400) return false;\r\n  if (!response.headers.has(\"x-uploadstuff-version\")) return false;\r\n\r\n  return true;\r\n};\r\n\r\nconst withExponentialBackoff = async <T>(\r\n  doTheThing: () => Promise<T | null>,\r\n  MAXIMUM_BACKOFF_MS = 64 * 1000,\r\n  MAX_RETRIES = 20\r\n): Promise<T | null> => {\r\n  let tries = 0;\r\n  let backoffMs = 500;\r\n  let backoffFuzzMs = 0;\r\n\r\n  let result = null;\r\n  while (tries <= MAX_RETRIES) {\r\n    result = await doTheThing();\r\n    if (result !== null) return result;\r\n\r\n    tries += 1;\r\n    backoffMs = Math.min(MAXIMUM_BACKOFF_MS, backoffMs * 2);\r\n    backoffFuzzMs = Math.floor(Math.random() * 500);\r\n\r\n    if (tries > 3) {\r\n      console.error(\r\n        `[UT] Call unsuccessful after ${tries} tries. Retrying in ${Math.floor(\r\n          backoffMs / 1000\r\n        )} seconds...`\r\n      );\r\n    }\r\n\r\n    await new Promise((r) => setTimeout(r, backoffMs + backoffFuzzMs));\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst conditionalDevServer = async (fileKey: string) => {\r\n  if (process.env.NODE_ENV !== \"development\") return;\r\n\r\n  const queryUrl = generateUploadStuffURL(`/api/poll/${fileKey}`);\r\n\r\n  const fileData = await withExponentialBackoff(async () => {\r\n    const res = await fetch(queryUrl);\r\n    const json = await res.json();\r\n\r\n    if (json.status !== \"done\") return null;\r\n\r\n    let callbackUrl = json.callbackUrl + `?slug=${json.callbackSlug}`;\r\n    if (!callbackUrl.startsWith(\"http\")) callbackUrl = \"http://\" + callbackUrl;\r\n\r\n    console.log(\"[UT] SIMULATING FILE UPLOAD WEBHOOK CALLBACK\", callbackUrl);\r\n\r\n    // TODO: Check that we \"actually hit our endpoint\" and throw a loud error if we didn't\r\n    const response = await fetch(callbackUrl, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        status: \"uploaded\",\r\n        metadata: JSON.parse(json.metadata ?? \"{}\"),\r\n        file: {\r\n          url: json.fileUrl,\r\n          key: fileKey ?? \"\",\r\n          name: json.fileName,\r\n        },\r\n      }),\r\n      headers: {\r\n        \"uploadstuff-hook\": \"callback\",\r\n      },\r\n    });\r\n    if (isValidResponse(response)) {\r\n      console.log(\"[UT] Successfully simulated callback for file\", fileKey);\r\n    } else {\r\n      console.error(\r\n        \"[UT] Failed to simulate callback for file. Is your webhook configured correctly?\",\r\n        fileKey\r\n      );\r\n    }\r\n    return json;\r\n  });\r\n\r\n  if (fileData !== null) return fileData;\r\n\r\n  console.error(`[UT] Failed to simulate callback for file ${fileKey}`);\r\n  throw new Error(\"File took too long to upload\");\r\n};\r\n\r\nconst GET_DEFAULT_URL = () => {\r\n  const vcurl = process.env.VERCEL_URL;\r\n  if (vcurl) return `https://${vcurl}/api/uploadstuff`; // SSR should use vercel url\r\n\r\n  return `http://localhost:${process.env.PORT ?? 3000}/api/uploadstuff`; // dev SSR should use localhost\r\n};\r\n\r\nexport type RouterWithConfig<TRouter extends FileRouter> = {\r\n  router: TRouter;\r\n  config?: {\r\n    callbackUrl?: string;\r\n  };\r\n};\r\n\r\nexport const buildRequestHandler = <\r\n  TRouter extends FileRouter,\r\n  TRuntime extends AnyRuntime\r\n>(\r\n  opts: RouterWithConfig<TRouter>\r\n) => {\r\n  return async (input: {\r\n    uploadstuffHook?: string;\r\n    slug?: string;\r\n    actionType?: string;\r\n    req: TRuntime extends \"pages\" ? NextApiRequest : Partial<Request>;\r\n    res?: TRuntime extends \"pages\" ? NextApiResponse : undefined;\r\n  }) => {\r\n    const { router, config } = opts;\r\n\r\n    const { uploadstuffHook, slug, req, res, actionType } = input;\r\n    if (!slug) throw new Error(\"we need a slug\");\r\n    const uploadable = router[slug];\r\n\r\n    if (!uploadable) {\r\n      return { status: 404 };\r\n    }\r\n\r\n    const reqBody =\r\n      \"body\" in req && typeof req.body === \"string\"\r\n        ? JSON.parse(req.body)\r\n        : await (req as Request).json();\r\n\r\n    if (uploadstuffHook && uploadstuffHook === \"callback\") {\r\n      // This is when we receive the webhook from uploadstuff\r\n      await uploadable.resolver({\r\n        file: reqBody.file,\r\n        metadata: reqBody.metadata,\r\n      });\r\n\r\n      return { status: 200 };\r\n    }\r\n\r\n    if (!actionType || actionType !== \"upload\") {\r\n      // This would either be someone spamming\r\n      // or the AWS webhook\r\n\r\n      return { status: 404 };\r\n    }\r\n\r\n    try {\r\n      const { files } = reqBody;\r\n      // @ts-expect-error TODO: Fix this\r\n      const metadata = await uploadable._def.middleware(req as Request, res);\r\n\r\n      // Once that passes, persist in DB\r\n\r\n      // Validate without Zod (for now)\r\n      if (!Array.isArray(files) || !files.every((f) => typeof f === \"string\"))\r\n        throw new Error(\"Need file array\");\r\n\r\n      // TODO: Make this a function\r\n      const uploadstuffApiResponse = await fetch(\r\n        generateUploadStuffURL(\"/api/prepareUpload\"),\r\n        {\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            files: files,\r\n            fileTypes: uploadable._def.fileTypes,\r\n            metadata,\r\n            callbackUrl: config?.callbackUrl ?? GET_DEFAULT_URL(),\r\n            callbackSlug: slug,\r\n            maxFileSize: fileSizeToBytes(uploadable._def.maxSize ?? \"16MB\"),\r\n          }),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-uploadstuff-version\": UPLOADSTUFF_VERSION,\r\n          },\r\n        }\r\n      );\r\n\r\n      if (!uploadstuffApiResponse.ok) {\r\n        console.error(\"[UT] unable to get presigned urls\");\r\n        try {\r\n          const error = await uploadstuffApiResponse.json();\r\n          console.error(error);\r\n        } catch (e) {\r\n          console.error(\"[UT] unable to parse response\");\r\n        }\r\n        throw new Error(\"ending upload\");\r\n      }\r\n\r\n      // This is when we send the response back to our form so it can submit the files\r\n\r\n      const parsedResponse = (await uploadstuffApiResponse.json()) as {\r\n        presignedUrl: { url: string }; // ripped type from S3 package\r\n        name: string;\r\n        key: string;\r\n      }[];\r\n\r\n      if (process.env.NODE_ENV === \"development\") {\r\n        parsedResponse.forEach((file) => {\r\n          conditionalDevServer(file.key);\r\n        });\r\n      }\r\n\r\n      return { body: parsedResponse, status: 200 };\r\n    } catch (e) {\r\n      console.error(\"[UT] middleware failed to run\");\r\n      console.error(e);\r\n\r\n      return { status: 400, message: (e as Error).toString() };\r\n    }\r\n  };\r\n};\r\n\r\nexport const buildPermissionsInfoHandler = <TRouter extends FileRouter>(\r\n  opts: RouterWithConfig<TRouter>\r\n) => {\r\n  return () => {\r\n    const r = opts.router;\r\n\r\n    const permissions = Object.keys(r).map((k) => {\r\n      const route = r[k];\r\n      return {\r\n        slug: k as keyof TRouter,\r\n        maxSize: route._def.maxSize,\r\n        fileTypes: route._def.fileTypes,\r\n      };\r\n    });\r\n\r\n    return permissions;\r\n  };\r\n};\r\n","import {\r\n  RouterWithConfig,\r\n  buildPermissionsInfoHandler,\r\n  buildRequestHandler,\r\n} from \"../../internal/handler\";\r\nimport type { FileRouter } from \"../../types\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-unsafe-member-access\r\nconst UPLOADSTUFF_VERSION = require(\"../../../package.json\").version as string;\r\n\r\nexport const createNextRouteHandler = <TRouter extends FileRouter>(\r\n  opts: RouterWithConfig<TRouter>\r\n) => {\r\n  if (!process.env.CUSTOM_UPLOADSTUFF_URL) {\r\n    throw new Error(\"[US] No CUSTOM_UPLOAD_STUFF_URL provided in .env file\");\r\n  }\r\n\r\n  const requestHandler = buildRequestHandler<TRouter, \"app\">(opts);\r\n\r\n  const POST = async (req: Request) => {\r\n    const params = new URL(req.url).searchParams;\r\n    const uploadstuffHook = req.headers.get(\"uploadstuff-hook\") ?? undefined;\r\n    const slug = params.get(\"slug\") ?? undefined;\r\n    const actionType = params.get(\"actionType\") ?? undefined;\r\n\r\n    const response = await requestHandler({\r\n      uploadstuffHook,\r\n      slug,\r\n      actionType,\r\n      req,\r\n    });\r\n    if (response.status === 200) {\r\n      return new Response(JSON.stringify(response.body), {\r\n        status: response.status,\r\n        headers: {\r\n          \"x-uploadstuff-version\": UPLOADSTUFF_VERSION,\r\n        },\r\n      });\r\n    }\r\n\r\n    return new Response(response.message ?? \"Unable to upload file.\", {\r\n      status: response.status,\r\n      headers: {\r\n        \"x-uploadstuff-version\": UPLOADSTUFF_VERSION,\r\n      },\r\n    });\r\n  };\r\n\r\n  const getBuildPerms = buildPermissionsInfoHandler<TRouter>(opts);\r\n\r\n  const GET = () => {\r\n    return new Response(JSON.stringify(getBuildPerms()), {\r\n      status: 200,\r\n      headers: {\r\n        \"x-uploadstuff-version\": UPLOADSTUFF_VERSION,\r\n      },\r\n    });\r\n  };\r\n\r\n  return { GET, POST };\r\n};\r\n","import type {\r\n  UnsetMarker,\r\n  UploadBuilder,\r\n  UploadBuilderDef,\r\n  Uploader,\r\n  AnyRuntime,\r\n} from \"./types\";\r\n\r\nexport function createBuilder<TRuntime extends AnyRuntime = \"web\">(\r\n  initDef: Partial<UploadBuilderDef<TRuntime>> = {}\r\n): UploadBuilder<{\r\n  _metadata: UnsetMarker;\r\n  _runtime: TRuntime;\r\n}> {\r\n  const _def: UploadBuilderDef<TRuntime> = {\r\n    fileTypes: [\"image\"],\r\n    maxSize: \"1MB\",\r\n    // @ts-expect-error - huh?\r\n    middleware: () => ({}),\r\n    ...initDef,\r\n  };\r\n\r\n  return {\r\n    fileTypes(types) {\r\n      return createBuilder({\r\n        ..._def,\r\n        fileTypes: types,\r\n      });\r\n    },\r\n    maxSize(size) {\r\n      return createBuilder({\r\n        ..._def,\r\n        maxSize: size,\r\n      });\r\n    },\r\n    middleware(resolver) {\r\n      return createBuilder({\r\n        ..._def,\r\n        middleware: resolver,\r\n      }) as UploadBuilder<{ _metadata: any; _runtime: TRuntime }>;\r\n    },\r\n    onUploadComplete(resolver) {\r\n      return {\r\n        _def,\r\n        resolver,\r\n      } as Uploader<{ _metadata: any; _runtime: TRuntime }>;\r\n    },\r\n  };\r\n}\r\n","export { createNextRouteHandler } from \"./src/next/core/approuter\";\r\nexport type { FileRouter } from \"./src/types\";\r\n\r\nimport { createBuilder } from \"./src/upload-builder\";\r\nexport const createUploadStuff = () => createBuilder<\"app\">();\r\n"],"mappings":"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","names":["UPLOADSTUFF_VERSION"]}