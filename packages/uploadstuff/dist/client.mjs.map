{"version":3,"sources":["../client.ts"],"sourcesContent":["import type { FileRouter } from \"./server\";\r\n\r\nconst createRequestPermsUrl = (config: { url?: string; slug: string }) => {\r\n  const queryParams = `?actionType=upload&slug=${config.slug}`;\r\n\r\n  return `${config?.url ?? \"/api/uploadstuff\"}${queryParams}`;\r\n};\r\n\r\nexport const DANGEROUS__uploadFiles = async <T extends string>(\r\n  files: File[],\r\n  endpoint: T,\r\n  config?: {\r\n    url?: string;\r\n  }\r\n) => {\r\n  // Get presigned URL for S3 upload\r\n  const s3ConnectionRes = await fetch(\r\n    createRequestPermsUrl({ url: config?.url, slug: endpoint }),\r\n    {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        files: files.map((f) => f.name),\r\n      }),\r\n    }\r\n  ).then((res) => {\r\n    // check for 200 response\r\n    if (!res.ok) throw new Error(\"Failed to get presigned URLs\");\r\n\r\n    // attempt to parse response\r\n    try {\r\n      return res.json();\r\n    } catch (e) {\r\n      // response is not JSON\r\n      console.error(e);\r\n      throw new Error(`Failed to parse response as JSON. Got: ${res.body}`);\r\n    }\r\n  });\r\n\r\n  if (!s3ConnectionRes || !Array.isArray(s3ConnectionRes))\r\n    throw \"No url received. How did you get here?\";\r\n\r\n  const fileUploadPromises = s3ConnectionRes.map(async (presigned: any) => {\r\n    const file = files.find((f) => f.name === presigned.name);\r\n\r\n    if (!file) {\r\n      console.error(\"No file found for presigned URL\", presigned);\r\n      throw new Error(\"No file found for presigned URL\");\r\n    }\r\n    const { url } = presigned.presignedUrl;\r\n\r\n    // Do S3 upload\r\n    const upload = await fetch(url, {\r\n      method: \"PUT\",\r\n      body: file,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    });\r\n\r\n    if (!upload.ok) throw new Error(\"Upload failed.\");\r\n\r\n    // Generate a URL for the uploaded image since AWS won't give me one\r\n    const dom = url.split(\"?\")[0].split(\"/\").slice(0, 4).join(\"/\");\r\n    const genUrl = dom + \"/\" + encodeURIComponent(presigned.key);\r\n\r\n    console.log(\"URL for uploaded image\", genUrl);\r\n\r\n    return {\r\n      fileKey: presigned.key,\r\n      fileUrl: genUrl,\r\n    };\r\n  });\r\n\r\n  return Promise.all(fileUploadPromises) as Promise<\r\n    { fileUrl: string; fileKey: string }[]\r\n  >;\r\n};\r\n\r\nexport type UploadFileType<T extends string> = typeof DANGEROUS__uploadFiles<T>;\r\n\r\nexport const genUploader = <\r\n  TRouter extends FileRouter\r\n>(): typeof DANGEROUS__uploadFiles<\r\n  keyof TRouter extends string ? keyof TRouter : string\r\n> => {\r\n  return DANGEROUS__uploadFiles;\r\n};\r\n\r\nexport const classNames = (...classes: string[]) => {\r\n  return classes.filter(Boolean).join(\" \");\r\n};\r\n\r\nexport const generateMimeTypes = (fileTypes: string[]) => {\r\n  return fileTypes.map((type) => `${type}/*`);\r\n};\r\n\r\nconst fromEntries = (iterable: any) => {\r\n  return [...iterable].reduce((obj, [key, val]) => {\r\n    obj[key] = val;\r\n    return obj;\r\n  }, {});\r\n};\r\n\r\nexport const generateClientDropzoneAccept = (fileTypes: string[]) => {\r\n  const mimeTypes = generateMimeTypes(fileTypes);\r\n  return fromEntries(mimeTypes.map((type) => [type, []]));\r\n};\r\n"],"mappings":";AAEA,IAAM,wBAAwB,CAAC,WAA2C;AACxE,QAAM,cAAc,2BAA2B,OAAO;AAEtD,SAAO,IAAG,iCAAQ,QAAO,qBAAqB;AAChD;AAEO,IAAM,yBAAyB,OACpC,OACA,UACA,WAGG;AAEH,QAAM,kBAAkB,MAAM;AAAA,IAC5B,sBAAsB,EAAE,KAAK,iCAAQ,KAAK,MAAM,SAAS,CAAC;AAAA,IAC1D;AAAA,MACE,QAAQ;AAAA,MACR,MAAM,KAAK,UAAU;AAAA,QACnB,OAAO,MAAM,IAAI,CAAC,MAAM,EAAE,IAAI;AAAA,MAChC,CAAC;AAAA,IACH;AAAA,EACF,EAAE,KAAK,CAAC,QAAQ;AAEd,QAAI,CAAC,IAAI;AAAI,YAAM,IAAI,MAAM,8BAA8B;AAG3D,QAAI;AACF,aAAO,IAAI,KAAK;AAAA,IAClB,SAAS,GAAP;AAEA,cAAQ,MAAM,CAAC;AACf,YAAM,IAAI,MAAM,0CAA0C,IAAI,MAAM;AAAA,IACtE;AAAA,EACF,CAAC;AAED,MAAI,CAAC,mBAAmB,CAAC,MAAM,QAAQ,eAAe;AACpD,UAAM;AAER,QAAM,qBAAqB,gBAAgB,IAAI,OAAO,cAAmB;AACvE,UAAM,OAAO,MAAM,KAAK,CAAC,MAAM,EAAE,SAAS,UAAU,IAAI;AAExD,QAAI,CAAC,MAAM;AACT,cAAQ,MAAM,mCAAmC,SAAS;AAC1D,YAAM,IAAI,MAAM,iCAAiC;AAAA,IACnD;AACA,UAAM,EAAE,IAAI,IAAI,UAAU;AAG1B,UAAM,SAAS,MAAM,MAAM,KAAK;AAAA,MAC9B,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,QACP,gBAAgB;AAAA,MAClB;AAAA,IACF,CAAC;AAED,QAAI,CAAC,OAAO;AAAI,YAAM,IAAI,MAAM,gBAAgB;AAGhD,UAAM,MAAM,IAAI,MAAM,GAAG,EAAE,CAAC,EAAE,MAAM,GAAG,EAAE,MAAM,GAAG,CAAC,EAAE,KAAK,GAAG;AAC7D,UAAM,SAAS,MAAM,MAAM,mBAAmB,UAAU,GAAG;AAE3D,YAAQ,IAAI,0BAA0B,MAAM;AAE5C,WAAO;AAAA,MACL,SAAS,UAAU;AAAA,MACnB,SAAS;AAAA,IACX;AAAA,EACF,CAAC;AAED,SAAO,QAAQ,IAAI,kBAAkB;AAGvC;AAIO,IAAM,cAAc,MAItB;AACH,SAAO;AACT;AAEO,IAAM,aAAa,IAAI,YAAsB;AAClD,SAAO,QAAQ,OAAO,OAAO,EAAE,KAAK,GAAG;AACzC;AAEO,IAAM,oBAAoB,CAAC,cAAwB;AACxD,SAAO,UAAU,IAAI,CAAC,SAAS,GAAG,QAAQ;AAC5C;AAEA,IAAM,cAAc,CAAC,aAAkB;AACrC,SAAO,CAAC,GAAG,QAAQ,EAAE,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM;AAC/C,QAAI,GAAG,IAAI;AACX,WAAO;AAAA,EACT,GAAG,CAAC,CAAC;AACP;AAEO,IAAM,+BAA+B,CAAC,cAAwB;AACnE,QAAM,YAAY,kBAAkB,SAAS;AAC7C,SAAO,YAAY,UAAU,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACxD;","names":[]}