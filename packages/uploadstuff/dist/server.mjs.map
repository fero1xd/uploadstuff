{"version":3,"sources":["../src/upload-builder.ts","../src/types.ts","../server.ts"],"sourcesContent":["import type {\r\n  UnsetMarker,\r\n  UploadBuilder,\r\n  UploadBuilderDef,\r\n  Uploader,\r\n  AnyRuntime,\r\n} from \"./types\";\r\n\r\nexport function createBuilder<TRuntime extends AnyRuntime = \"web\">(\r\n  initDef: Partial<UploadBuilderDef<TRuntime>> = {}\r\n): UploadBuilder<{\r\n  _metadata: UnsetMarker;\r\n  _runtime: TRuntime;\r\n}> {\r\n  const _def: UploadBuilderDef<TRuntime> = {\r\n    fileTypes: [\"image\"],\r\n    maxSize: \"1MB\",\r\n    // @ts-expect-error - huh?\r\n    middleware: () => ({}),\r\n    ...initDef,\r\n  };\r\n\r\n  return {\r\n    fileTypes(types) {\r\n      return createBuilder({\r\n        ..._def,\r\n        fileTypes: types,\r\n      });\r\n    },\r\n    maxSize(size) {\r\n      return createBuilder({\r\n        ..._def,\r\n        maxSize: size,\r\n      });\r\n    },\r\n    middleware(resolver) {\r\n      return createBuilder({\r\n        ..._def,\r\n        middleware: resolver,\r\n      }) as UploadBuilder<{ _metadata: any; _runtime: TRuntime }>;\r\n    },\r\n    onUploadComplete(resolver) {\r\n      return {\r\n        _def,\r\n        resolver,\r\n      } as Uploader<{ _metadata: any; _runtime: TRuntime }>;\r\n    },\r\n  };\r\n}\r\n","import type { NextApiRequest, NextApiResponse } from \"next\";\r\nimport { NextRequest } from \"next/server\";\r\n\r\n// Utils\r\nexport const unsetMarker = \"unsetMarker\" as \"unsetMarker\" & {\r\n  __brand: \"unsetMarker\";\r\n};\r\nexport type UnsetMarker = typeof unsetMarker;\r\n\r\ntype Simplify<TType> = { [TKey in keyof TType]: TType[TKey] } & {};\r\n\r\nexport type MaybePromise<TType> = TType | Promise<TType>;\r\n\r\n// Package\r\nexport type AnyRuntime = \"app\" | \"pages\" | \"web\";\r\nexport interface AnyParams {\r\n  _metadata: any; // imaginary field used to bind metadata return type to an Upload resolver\r\n  _runtime: any;\r\n}\r\n\r\ntype UploadedFile = {\r\n  name: string;\r\n  key: string;\r\n  url: string;\r\n};\r\n\r\ntype AllowedFiles = \"image\" | \"video\" | \"audio\" | \"blob\";\r\n\r\nexport type SizeUnit = \"B\" | \"KB\" | \"MB\" | \"GB\";\r\ntype PowOf2 = 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128 | 256 | 512 | 1024;\r\nexport type FileSize = `${PowOf2}${SizeUnit}`;\r\n\r\ntype ResolverOptions<TParams extends AnyParams> = {\r\n  metadata: Simplify<\r\n    TParams[\"_metadata\"] extends UnsetMarker ? undefined : TParams[\"_metadata\"]\r\n  >;\r\n\r\n  file: UploadedFile;\r\n};\r\n\r\nexport type ReqMiddlewareFn<TOutput extends Record<string, unknown>> = (\r\n  req: Request\r\n) => MaybePromise<TOutput>;\r\nexport type NextReqMiddlewareFn<TOutput extends Record<string, unknown>> = (\r\n  req: NextRequest\r\n) => MaybePromise<TOutput>;\r\nexport type NextApiMiddlewareFn<TOutput extends Record<string, unknown>> = (\r\n  req: NextApiRequest,\r\n  res: NextApiResponse\r\n) => MaybePromise<TOutput>;\r\n\r\ntype MiddlewareFn<\r\n  TOutput extends Record<string, unknown>,\r\n  TRuntime extends string\r\n> = TRuntime extends \"web\"\r\n  ? ReqMiddlewareFn<TOutput>\r\n  : TRuntime extends \"app\"\r\n  ? NextReqMiddlewareFn<TOutput>\r\n  : NextApiMiddlewareFn<TOutput>;\r\n\r\ntype ResolverFn<TParams extends AnyParams> = (\r\n  opts: ResolverOptions<TParams>\r\n) => MaybePromise<void>;\r\n\r\nexport interface UploadBuilder<TParams extends AnyParams> {\r\n  fileTypes: (types: AllowedFiles[]) => UploadBuilder<TParams>;\r\n  maxSize: (size: FileSize) => UploadBuilder<TParams>;\r\n\r\n  middleware: <TOutput extends Record<string, unknown>>(\r\n    fn: MiddlewareFn<TOutput, TParams[\"_runtime\"]>\r\n  ) => UploadBuilder<{\r\n    _metadata: TOutput;\r\n    _runtime: TParams[\"_runtime\"];\r\n  }>;\r\n\r\n  onUploadComplete: (fn: ResolverFn<TParams>) => Uploader<TParams>;\r\n}\r\n\r\nexport type UploadBuilderDef<TRuntime extends AnyRuntime> = {\r\n  fileTypes: AllowedFiles[];\r\n  maxSize: FileSize;\r\n  middleware: MiddlewareFn<{}, TRuntime>;\r\n};\r\n\r\nexport interface Uploader<TParams extends AnyParams> {\r\n  _def: TParams & UploadBuilderDef<TParams[\"_runtime\"]>;\r\n  resolver: ResolverFn<TParams>;\r\n}\r\n\r\nexport type FileRouter<TParams extends AnyParams = AnyParams> = Record<\r\n  string,\r\n  Uploader<TParams>\r\n>;\r\n","import { createBuilder } from \"./src/upload-builder\";\r\nexport * from \"./src/types\";\r\n\r\nexport const createUploadStuff = () => createBuilder<\"web\">();\r\n"],"mappings":";AAQO,SAAS,cACd,UAA+C,CAAC,GAI/C;AACD,QAAM,OAAmC;AAAA,IACvC,WAAW,CAAC,OAAO;AAAA,IACnB,SAAS;AAAA;AAAA,IAET,YAAY,OAAO,CAAC;AAAA,IACpB,GAAG;AAAA,EACL;AAEA,SAAO;AAAA,IACL,UAAU,OAAO;AACf,aAAO,cAAc;AAAA,QACnB,GAAG;AAAA,QACH,WAAW;AAAA,MACb,CAAC;AAAA,IACH;AAAA,IACA,QAAQ,MAAM;AACZ,aAAO,cAAc;AAAA,QACnB,GAAG;AAAA,QACH,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAAA,IACA,WAAW,UAAU;AACnB,aAAO,cAAc;AAAA,QACnB,GAAG;AAAA,QACH,YAAY;AAAA,MACd,CAAC;AAAA,IACH;AAAA,IACA,iBAAiB,UAAU;AACzB,aAAO;AAAA,QACL;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;;;AC5CO,IAAM,cAAc;;;ACDpB,IAAM,oBAAoB,MAAM,cAAqB;","names":[]}